// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FixedSaleCreated extends ethereum.Event {
  get params(): FixedSaleCreated__Params {
    return new FixedSaleCreated__Params(this);
  }
}

export class FixedSaleCreated__Params {
  _event: FixedSaleCreated;

  constructor(event: FixedSaleCreated) {
    this._event = event;
  }

  get saleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isERC721(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get fixedPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get startingTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class FixedSaleFinished extends ethereum.Event {
  get params(): FixedSaleFinished__Params {
    return new FixedSaleFinished__Params(this);
  }
}

export class FixedSaleFinished__Params {
  _event: FixedSaleFinished;

  constructor(event: FixedSaleFinished) {
    this._event = event;
  }

  get saleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class FixedSaleSuccessful extends ethereum.Event {
  get params(): FixedSaleSuccessful__Params {
    return new FixedSaleSuccessful__Params(this);
  }
}

export class FixedSaleSuccessful__Params {
  _event: FixedSaleSuccessful;

  constructor(event: FixedSaleSuccessful) {
    this._event = event;
  }

  get saleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isERC721(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get totalPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class MinTokensBeforeSwapUpdated extends ethereum.Event {
  get params(): MinTokensBeforeSwapUpdated__Params {
    return new MinTokensBeforeSwapUpdated__Params(this);
  }
}

export class MinTokensBeforeSwapUpdated__Params {
  _event: MinTokensBeforeSwapUpdated;

  constructor(event: MinTokensBeforeSwapUpdated) {
    this._event = event;
  }

  get minTokensBeforeSwap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SwapAndLiquify extends ethereum.Event {
  get params(): SwapAndLiquify__Params {
    return new SwapAndLiquify__Params(this);
  }
}

export class SwapAndLiquify__Params {
  _event: SwapAndLiquify;

  constructor(event: SwapAndLiquify) {
    this._event = event;
  }

  get tokensSwapped(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensIntoLiqudity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SwapAndLiquifyEnabledUpdated extends ethereum.Event {
  get params(): SwapAndLiquifyEnabledUpdated__Params {
    return new SwapAndLiquifyEnabledUpdated__Params(this);
  }
}

export class SwapAndLiquifyEnabledUpdated__Params {
  _event: SwapAndLiquifyEnabledUpdated;

  constructor(event: SwapAndLiquifyEnabledUpdated) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OfficialMarkerplaceContract__getFixedSaleResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class OfficialMarkerplaceContract extends ethereum.SmartContract {
  static bind(address: Address): OfficialMarkerplaceContract {
    return new OfficialMarkerplaceContract(
      "OfficialMarkerplaceContract",
      address
    );
  }

  ARTIST_CUT(): i32 {
    let result = super.call("ARTIST_CUT", "ARTIST_CUT():(uint16)", []);

    return result[0].toI32();
  }

  try_ARTIST_CUT(): ethereum.CallResult<i32> {
    let result = super.tryCall("ARTIST_CUT", "ARTIST_CUT():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LISTER_ROLE(): Bytes {
    let result = super.call("LISTER_ROLE", "LISTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_LISTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("LISTER_ROLE", "LISTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  artistNFTAddress(): Address {
    let result = super.call(
      "artistNFTAddress",
      "artistNFTAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_artistNFTAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "artistNFTAddress",
      "artistNFTAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFixedSale(
    _saleId: BigInt
  ): OfficialMarkerplaceContract__getFixedSaleResult {
    let result = super.call(
      "getFixedSale",
      "getFixedSale(uint256):(uint256,address,address,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_saleId)]
    );

    return new OfficialMarkerplaceContract__getFixedSaleResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_getFixedSale(
    _saleId: BigInt
  ): ethereum.CallResult<OfficialMarkerplaceContract__getFixedSaleResult> {
    let result = super.tryCall(
      "getFixedSale",
      "getFixedSale(uint256):(uint256,address,address,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OfficialMarkerplaceContract__getFixedSaleResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityCut(): i32 {
    let result = super.call("liquidityCut", "liquidityCut():(uint16)", []);

    return result[0].toI32();
  }

  try_liquidityCut(): ethereum.CallResult<i32> {
    let result = super.tryCall("liquidityCut", "liquidityCut():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  liquidityTokens(): BigInt {
    let result = super.call(
      "liquidityTokens",
      "liquidityTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityTokens",
      "liquidityTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maintenanceCut(): i32 {
    let result = super.call("maintenanceCut", "maintenanceCut():(uint16)", []);

    return result[0].toI32();
  }

  try_maintenanceCut(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maintenanceCut",
      "maintenanceCut():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pancakeRouter(): Address {
    let result = super.call("pancakeRouter", "pancakeRouter():(address)", []);

    return result[0].toAddress();
  }

  try_pancakeRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pancakeRouter",
      "pancakeRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardsCut(): i32 {
    let result = super.call("rewardsCut", "rewardsCut():(uint16)", []);

    return result[0].toI32();
  }

  try_rewardsCut(): ethereum.CallResult<i32> {
    let result = super.tryCall("rewardsCut", "rewardsCut():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  serverCut(): i32 {
    let result = super.call("serverCut", "serverCut():(uint16)", []);

    return result[0].toI32();
  }

  try_serverCut(): ethereum.CallResult<i32> {
    let result = super.tryCall("serverCut", "serverCut():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapAndLiquifyEnabled(): boolean {
    let result = super.call(
      "swapAndLiquifyEnabled",
      "swapAndLiquifyEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_swapAndLiquifyEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "swapAndLiquifyEnabled",
      "swapAndLiquifyEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _saleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ChangeFeesCall extends ethereum.Call {
  get inputs(): ChangeFeesCall__Inputs {
    return new ChangeFeesCall__Inputs(this);
  }

  get outputs(): ChangeFeesCall__Outputs {
    return new ChangeFeesCall__Outputs(this);
  }
}

export class ChangeFeesCall__Inputs {
  _call: ChangeFeesCall;

  constructor(call: ChangeFeesCall) {
    this._call = call;
  }

  get _rewardsCut(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _serverCut(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _maintenanceCut(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _liquidityCut(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ChangeFeesCall__Outputs {
  _call: ChangeFeesCall;

  constructor(call: ChangeFeesCall) {
    this._call = call;
  }
}

export class ChangeWalletAddressesCall extends ethereum.Call {
  get inputs(): ChangeWalletAddressesCall__Inputs {
    return new ChangeWalletAddressesCall__Inputs(this);
  }

  get outputs(): ChangeWalletAddressesCall__Outputs {
    return new ChangeWalletAddressesCall__Outputs(this);
  }
}

export class ChangeWalletAddressesCall__Inputs {
  _call: ChangeWalletAddressesCall;

  constructor(call: ChangeWalletAddressesCall) {
    this._call = call;
  }

  get _rewardsWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _serverWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maintenanceWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ChangeWalletAddressesCall__Outputs {
  _call: ChangeWalletAddressesCall;

  constructor(call: ChangeWalletAddressesCall) {
    this._call = call;
  }
}

export class CreateBulkSaleFixedPriceCall extends ethereum.Call {
  get inputs(): CreateBulkSaleFixedPriceCall__Inputs {
    return new CreateBulkSaleFixedPriceCall__Inputs(this);
  }

  get outputs(): CreateBulkSaleFixedPriceCall__Outputs {
    return new CreateBulkSaleFixedPriceCall__Outputs(this);
  }
}

export class CreateBulkSaleFixedPriceCall__Inputs {
  _call: CreateBulkSaleFixedPriceCall;

  constructor(call: CreateBulkSaleFixedPriceCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amount(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _fixedPrice(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _startingTime(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class CreateBulkSaleFixedPriceCall__Outputs {
  _call: CreateBulkSaleFixedPriceCall;

  constructor(call: CreateBulkSaleFixedPriceCall) {
    this._call = call;
  }
}

export class CreateSaleFixedPriceCall extends ethereum.Call {
  get inputs(): CreateSaleFixedPriceCall__Inputs {
    return new CreateSaleFixedPriceCall__Inputs(this);
  }

  get outputs(): CreateSaleFixedPriceCall__Outputs {
    return new CreateSaleFixedPriceCall__Outputs(this);
  }
}

export class CreateSaleFixedPriceCall__Inputs {
  _call: CreateSaleFixedPriceCall;

  constructor(call: CreateSaleFixedPriceCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _fixedPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _startingTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateSaleFixedPriceCall__Outputs {
  _call: CreateSaleFixedPriceCall;

  constructor(call: CreateSaleFixedPriceCall) {
    this._call = call;
  }
}

export class FinishFixedSaleCall extends ethereum.Call {
  get inputs(): FinishFixedSaleCall__Inputs {
    return new FinishFixedSaleCall__Inputs(this);
  }

  get outputs(): FinishFixedSaleCall__Outputs {
    return new FinishFixedSaleCall__Outputs(this);
  }
}

export class FinishFixedSaleCall__Inputs {
  _call: FinishFixedSaleCall;

  constructor(call: FinishFixedSaleCall) {
    this._call = call;
  }

  get _saleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinishFixedSaleCall__Outputs {
  _call: FinishFixedSaleCall;

  constructor(call: FinishFixedSaleCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _artistNFTAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _busdAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ecchiCoinAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
