// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Nft entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Nft entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Nft", id.toString(), this);
  }

  static load(id: string): Nft | null {
    return store.get("Nft", id) as Nft | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get amountMinted(): BigInt {
    let value = this.get("amountMinted");
    return value.toBigInt();
  }

  set amountMinted(value: BigInt) {
    this.set("amountMinted", Value.fromBigInt(value));
  }

  get contractAddress(): string | null {
    let value = this.get("contractAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractAddress(value: string | null) {
    if (value === null) {
      this.unset("contractAddress");
    } else {
      this.set("contractAddress", Value.fromString(value as string));
    }
  }

  get tokenMetadataUri(): string {
    let value = this.get("tokenMetadataUri");
    return value.toString();
  }

  set tokenMetadataUri(value: string) {
    this.set("tokenMetadataUri", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(value as string));
    }
  }

  get dateMinted(): BigInt {
    let value = this.get("dateMinted");
    return value.toBigInt();
  }

  set dateMinted(value: BigInt) {
    this.set("dateMinted", Value.fromBigInt(value));
  }

  get owners(): Array<string | null> {
    let value = this.get("owners");
    return value.toStringArray();
  }

  set owners(value: Array<string | null>) {
    this.set("owners", Value.fromStringArray(value));
  }

  get erc721Owner(): string | null {
    let value = this.get("erc721Owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc721Owner(value: string | null) {
    if (value === null) {
      this.unset("erc721Owner");
    } else {
      this.set("erc721Owner", Value.fromString(value as string));
    }
  }

  get isOnSale(): boolean {
    let value = this.get("isOnSale");
    return value.toBoolean();
  }

  set isOnSale(value: boolean) {
    this.set("isOnSale", Value.fromBoolean(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get isERC721(): boolean {
    let value = this.get("isERC721");
    return value.toBoolean();
  }

  set isERC721(value: boolean) {
    this.set("isERC721", Value.fromBoolean(value));
  }

  get isPublicAllowed(): boolean {
    let value = this.get("isPublicAllowed");
    return value.toBoolean();
  }

  set isPublicAllowed(value: boolean) {
    this.set("isPublicAllowed", Value.fromBoolean(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }

  get allSales(): Array<string> {
    let value = this.get("allSales");
    return value.toStringArray();
  }

  set allSales(value: Array<string>) {
    this.set("allSales", Value.fromStringArray(value));
  }
}

export class Collector extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Collector entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Collector entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Collector", id.toString(), this);
  }

  static load(id: string): Collector | null {
    return store.get("Collector", id) as Collector | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nfts(): Array<string> | null {
    let value = this.get("nfts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nfts(value: Array<string> | null) {
    if (value === null) {
      this.unset("nfts");
    } else {
      this.set("nfts", Value.fromStringArray(value as Array<string>));
    }
  }

  get totalAttributes(): BigInt {
    let value = this.get("totalAttributes");
    return value.toBigInt();
  }

  set totalAttributes(value: BigInt) {
    this.set("totalAttributes", Value.fromBigInt(value));
  }

  get rank(): string | null {
    let value = this.get("rank");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rank(value: string | null) {
    if (value === null) {
      this.unset("rank");
    } else {
      this.set("rank", Value.fromString(value as string));
    }
  }
}

export class CollectorNfts extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollectorNfts entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollectorNfts entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollectorNfts", id.toString(), this);
  }

  static load(id: string): CollectorNfts | null {
    return store.get("CollectorNfts", id) as CollectorNfts | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collector(): string {
    let value = this.get("collector");
    return value.toString();
  }

  set collector(value: string) {
    this.set("collector", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (value === null) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(value as string));
    }
  }
}

export class Artist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Artist entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Artist entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Artist", id.toString(), this);
  }

  static load(id: string): Artist | null {
    return store.get("Artist", id) as Artist | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMinted(): Array<string> {
    let value = this.get("nftMinted");
    return value.toStringArray();
  }

  set nftMinted(value: Array<string>) {
    this.set("nftMinted", Value.fromStringArray(value));
  }
}

export class NftSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NftSale entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NftSale entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NftSale", id.toString(), this);
  }

  static load(id: string): NftSale | null {
    return store.get("NftSale", id) as NftSale | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soldPrice(): BigDecimal | null {
    let value = this.get("soldPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set soldPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("soldPrice");
    } else {
      this.set("soldPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get fixedPriceSale(): Array<string> {
    let value = this.get("fixedPriceSale");
    return value.toStringArray();
  }

  set fixedPriceSale(value: Array<string>) {
    this.set("fixedPriceSale", Value.fromStringArray(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get dateListed(): BigInt | null {
    let value = this.get("dateListed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateListed(value: BigInt | null) {
    if (value === null) {
      this.unset("dateListed");
    } else {
      this.set("dateListed", Value.fromBigInt(value as BigInt));
    }
  }

  get amountOnSale(): BigInt | null {
    let value = this.get("amountOnSale");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountOnSale(value: BigInt | null) {
    if (value === null) {
      this.unset("amountOnSale");
    } else {
      this.set("amountOnSale", Value.fromBigInt(value as BigInt));
    }
  }
}

export class FixedPriceSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FixedPriceSale entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FixedPriceSale entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FixedPriceSale", id.toString(), this);
  }

  static load(id: string): FixedPriceSale | null {
    return store.get("FixedPriceSale", id) as FixedPriceSale | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get saleId(): BigInt {
    let value = this.get("saleId");
    return value.toBigInt();
  }

  set saleId(value: BigInt) {
    this.set("saleId", Value.fromBigInt(value));
  }

  get tokenID(): string {
    let value = this.get("tokenID");
    return value.toString();
  }

  set tokenID(value: string) {
    this.set("tokenID", Value.fromString(value));
  }

  get fixedArtworkSale(): string | null {
    let value = this.get("fixedArtworkSale");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fixedArtworkSale(value: string | null) {
    if (value === null) {
      this.unset("fixedArtworkSale");
    } else {
      this.set("fixedArtworkSale", Value.fromString(value as string));
    }
  }

  get fixedPrice(): BigDecimal {
    let value = this.get("fixedPrice");
    return value.toBigDecimal();
  }

  set fixedPrice(value: BigDecimal) {
    this.set("fixedPrice", Value.fromBigDecimal(value));
  }

  get startingDateTime(): BigInt {
    let value = this.get("startingDateTime");
    return value.toBigInt();
  }

  set startingDateTime(value: BigInt) {
    this.set("startingDateTime", Value.fromBigInt(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }
}
